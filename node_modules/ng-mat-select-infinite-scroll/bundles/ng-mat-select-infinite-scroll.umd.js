(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/material/select'), require('rxjs/operators'), require('rxjs')) :
    typeof define === 'function' && define.amd ? define('ng-mat-select-infinite-scroll', ['exports', '@angular/core', '@angular/material/select', 'rxjs/operators', 'rxjs'], factory) :
    (global = global || self, factory(global['ng-mat-select-infinite-scroll'] = {}, global.ng.core, global.ng.material.select, global.rxjs.operators, global.rxjs));
}(this, function (exports, core, select, operators, rxjs) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MatSelectInfiniteScrollDirective = /** @class */ (function () {
        function MatSelectInfiniteScrollDirective(matSelect, ngZone) {
            this.matSelect = matSelect;
            this.ngZone = ngZone;
            this.threshold = '15%';
            this.debounceTime = 150;
            this.infiniteScroll = new core.EventEmitter();
            this.thrPx = 0;
            this.thrPc = 0;
            this.singleOptionHeight = select.SELECT_ITEM_HEIGHT_EM;
            this.destroyed$ = new rxjs.Subject();
        }
        /**
         * @return {?}
         */
        MatSelectInfiniteScrollDirective.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.evaluateThreshold();
        };
        /**
         * @return {?}
         */
        MatSelectInfiniteScrollDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.matSelect.openedChange.pipe(operators.takeUntil(this.destroyed$)).subscribe((/**
             * @param {?} opened
             * @return {?}
             */
            function (opened) {
                if (opened) {
                    _this.panel = _this.matSelect.panel.nativeElement;
                    _this.singleOptionHeight = _this.getSelectItemHeightPx();
                    _this.registerScrollListener();
                }
            }));
        };
        /**
         * @return {?}
         */
        MatSelectInfiniteScrollDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.destroyed$.next(true);
            this.destroyed$.complete();
        };
        /**
         * @return {?}
         */
        MatSelectInfiniteScrollDirective.prototype.evaluateThreshold = /**
         * @return {?}
         */
        function () {
            if (this.threshold.lastIndexOf('%') > -1) {
                this.thrPx = 0;
                this.thrPc = (parseFloat(this.threshold) / 100);
            }
            else {
                this.thrPx = parseFloat(this.threshold);
                this.thrPc = 0;
            }
        };
        /**
         * @return {?}
         */
        MatSelectInfiniteScrollDirective.prototype.registerScrollListener = /**
         * @return {?}
         */
        function () {
            var _this = this;
            rxjs.fromEvent(this.panel, 'scroll').pipe(operators.takeUntil(this.destroyed$), operators.debounceTime(this.debounceTime), operators.tap((/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                _this.handleScrollEvent(event);
            }))).subscribe();
        };
        /**
         * @param {?} event
         * @return {?}
         */
        MatSelectInfiniteScrollDirective.prototype.handleScrollEvent = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                if (_this.complete) {
                    return;
                }
                /** @type {?} */
                var countOfRenderedOptions = _this.matSelect.options.length;
                /** @type {?} */
                var infiniteScrollDistance = _this.singleOptionHeight * countOfRenderedOptions;
                /** @type {?} */
                var threshold = _this.thrPc !== 0 ? (infiniteScrollDistance * _this.thrPc) : _this.thrPx;
                /** @type {?} */
                var scrolledDistance = _this.panel.clientHeight + event.target.scrollTop;
                if ((scrolledDistance + threshold) >= infiniteScrollDistance) {
                    _this.ngZone.run((/**
                     * @return {?}
                     */
                    function () { return _this.infiniteScroll.emit(); }));
                }
            }));
        };
        /**
         * @return {?}
         */
        MatSelectInfiniteScrollDirective.prototype.getSelectItemHeightPx = /**
         * @return {?}
         */
        function () {
            return parseFloat(getComputedStyle(this.panel).fontSize) * select.SELECT_ITEM_HEIGHT_EM;
        };
        MatSelectInfiniteScrollDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[msInfiniteScroll]'
                    },] }
        ];
        /** @nocollapse */
        MatSelectInfiniteScrollDirective.ctorParameters = function () { return [
            { type: select.MatSelect },
            { type: core.NgZone }
        ]; };
        MatSelectInfiniteScrollDirective.propDecorators = {
            threshold: [{ type: core.Input }],
            debounceTime: [{ type: core.Input }],
            complete: [{ type: core.Input }],
            infiniteScroll: [{ type: core.Output }]
        };
        return MatSelectInfiniteScrollDirective;
    }());
    if (false) {
        /** @type {?} */
        MatSelectInfiniteScrollDirective.prototype.threshold;
        /** @type {?} */
        MatSelectInfiniteScrollDirective.prototype.debounceTime;
        /** @type {?} */
        MatSelectInfiniteScrollDirective.prototype.complete;
        /** @type {?} */
        MatSelectInfiniteScrollDirective.prototype.infiniteScroll;
        /**
         * @type {?}
         * @private
         */
        MatSelectInfiniteScrollDirective.prototype.panel;
        /**
         * @type {?}
         * @private
         */
        MatSelectInfiniteScrollDirective.prototype.thrPx;
        /**
         * @type {?}
         * @private
         */
        MatSelectInfiniteScrollDirective.prototype.thrPc;
        /**
         * @type {?}
         * @private
         */
        MatSelectInfiniteScrollDirective.prototype.singleOptionHeight;
        /**
         * @type {?}
         * @private
         */
        MatSelectInfiniteScrollDirective.prototype.destroyed$;
        /**
         * @type {?}
         * @private
         */
        MatSelectInfiniteScrollDirective.prototype.matSelect;
        /**
         * @type {?}
         * @private
         */
        MatSelectInfiniteScrollDirective.prototype.ngZone;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MatSelectInfiniteScrollModule = /** @class */ (function () {
        function MatSelectInfiniteScrollModule() {
        }
        MatSelectInfiniteScrollModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [MatSelectInfiniteScrollDirective],
                        imports: [
                            select.MatSelectModule
                        ],
                        exports: [MatSelectInfiniteScrollDirective]
                    },] }
        ];
        return MatSelectInfiniteScrollModule;
    }());

    exports.MatSelectInfiniteScrollDirective = MatSelectInfiniteScrollDirective;
    exports.MatSelectInfiniteScrollModule = MatSelectInfiniteScrollModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=ng-mat-select-infinite-scroll.umd.js.map
