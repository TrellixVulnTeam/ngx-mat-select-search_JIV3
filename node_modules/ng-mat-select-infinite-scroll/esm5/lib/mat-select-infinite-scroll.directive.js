/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, EventEmitter, Input, NgZone, Output } from '@angular/core';
import { MatSelect, SELECT_ITEM_HEIGHT_EM } from '@angular/material/select';
import { debounceTime, takeUntil, tap } from 'rxjs/operators';
import { fromEvent, Subject } from 'rxjs';
var MatSelectInfiniteScrollDirective = /** @class */ (function () {
    function MatSelectInfiniteScrollDirective(matSelect, ngZone) {
        this.matSelect = matSelect;
        this.ngZone = ngZone;
        this.threshold = '15%';
        this.debounceTime = 150;
        this.infiniteScroll = new EventEmitter();
        this.thrPx = 0;
        this.thrPc = 0;
        this.singleOptionHeight = SELECT_ITEM_HEIGHT_EM;
        this.destroyed$ = new Subject();
    }
    /**
     * @return {?}
     */
    MatSelectInfiniteScrollDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.evaluateThreshold();
    };
    /**
     * @return {?}
     */
    MatSelectInfiniteScrollDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.matSelect.openedChange.pipe(takeUntil(this.destroyed$)).subscribe((/**
         * @param {?} opened
         * @return {?}
         */
        function (opened) {
            if (opened) {
                _this.panel = _this.matSelect.panel.nativeElement;
                _this.singleOptionHeight = _this.getSelectItemHeightPx();
                _this.registerScrollListener();
            }
        }));
    };
    /**
     * @return {?}
     */
    MatSelectInfiniteScrollDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroyed$.next(true);
        this.destroyed$.complete();
    };
    /**
     * @return {?}
     */
    MatSelectInfiniteScrollDirective.prototype.evaluateThreshold = /**
     * @return {?}
     */
    function () {
        if (this.threshold.lastIndexOf('%') > -1) {
            this.thrPx = 0;
            this.thrPc = (parseFloat(this.threshold) / 100);
        }
        else {
            this.thrPx = parseFloat(this.threshold);
            this.thrPc = 0;
        }
    };
    /**
     * @return {?}
     */
    MatSelectInfiniteScrollDirective.prototype.registerScrollListener = /**
     * @return {?}
     */
    function () {
        var _this = this;
        fromEvent(this.panel, 'scroll').pipe(takeUntil(this.destroyed$), debounceTime(this.debounceTime), tap((/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            _this.handleScrollEvent(event);
        }))).subscribe();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    MatSelectInfiniteScrollDirective.prototype.handleScrollEvent = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            if (_this.complete) {
                return;
            }
            /** @type {?} */
            var countOfRenderedOptions = _this.matSelect.options.length;
            /** @type {?} */
            var infiniteScrollDistance = _this.singleOptionHeight * countOfRenderedOptions;
            /** @type {?} */
            var threshold = _this.thrPc !== 0 ? (infiniteScrollDistance * _this.thrPc) : _this.thrPx;
            /** @type {?} */
            var scrolledDistance = _this.panel.clientHeight + event.target.scrollTop;
            if ((scrolledDistance + threshold) >= infiniteScrollDistance) {
                _this.ngZone.run((/**
                 * @return {?}
                 */
                function () { return _this.infiniteScroll.emit(); }));
            }
        }));
    };
    /**
     * @return {?}
     */
    MatSelectInfiniteScrollDirective.prototype.getSelectItemHeightPx = /**
     * @return {?}
     */
    function () {
        return parseFloat(getComputedStyle(this.panel).fontSize) * SELECT_ITEM_HEIGHT_EM;
    };
    MatSelectInfiniteScrollDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[msInfiniteScroll]'
                },] }
    ];
    /** @nocollapse */
    MatSelectInfiniteScrollDirective.ctorParameters = function () { return [
        { type: MatSelect },
        { type: NgZone }
    ]; };
    MatSelectInfiniteScrollDirective.propDecorators = {
        threshold: [{ type: Input }],
        debounceTime: [{ type: Input }],
        complete: [{ type: Input }],
        infiniteScroll: [{ type: Output }]
    };
    return MatSelectInfiniteScrollDirective;
}());
export { MatSelectInfiniteScrollDirective };
if (false) {
    /** @type {?} */
    MatSelectInfiniteScrollDirective.prototype.threshold;
    /** @type {?} */
    MatSelectInfiniteScrollDirective.prototype.debounceTime;
    /** @type {?} */
    MatSelectInfiniteScrollDirective.prototype.complete;
    /** @type {?} */
    MatSelectInfiniteScrollDirective.prototype.infiniteScroll;
    /**
     * @type {?}
     * @private
     */
    MatSelectInfiniteScrollDirective.prototype.panel;
    /**
     * @type {?}
     * @private
     */
    MatSelectInfiniteScrollDirective.prototype.thrPx;
    /**
     * @type {?}
     * @private
     */
    MatSelectInfiniteScrollDirective.prototype.thrPc;
    /**
     * @type {?}
     * @private
     */
    MatSelectInfiniteScrollDirective.prototype.singleOptionHeight;
    /**
     * @type {?}
     * @private
     */
    MatSelectInfiniteScrollDirective.prototype.destroyed$;
    /**
     * @type {?}
     * @private
     */
    MatSelectInfiniteScrollDirective.prototype.matSelect;
    /**
     * @type {?}
     * @private
     */
    MatSelectInfiniteScrollDirective.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0LXNlbGVjdC1pbmZpbml0ZS1zY3JvbGwuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctbWF0LXNlbGVjdC1pbmZpbml0ZS1zY3JvbGwvIiwic291cmNlcyI6WyJsaWIvbWF0LXNlbGVjdC1pbmZpbml0ZS1zY3JvbGwuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQWdCLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBcUIsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQy9HLE9BQU8sRUFBQyxTQUFTLEVBQUUscUJBQXFCLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUMxRSxPQUFPLEVBQUMsWUFBWSxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUM1RCxPQUFPLEVBQUMsU0FBUyxFQUFFLE9BQU8sRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUV4QztJQWlCRSwwQ0FBb0IsU0FBb0IsRUFBVSxNQUFjO1FBQTVDLGNBQVMsR0FBVCxTQUFTLENBQVc7UUFBVSxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBWnZELGNBQVMsR0FBRyxLQUFLLENBQUM7UUFDbEIsaUJBQVksR0FBRyxHQUFHLENBQUM7UUFFbEIsbUJBQWMsR0FBRyxJQUFJLFlBQVksRUFBUSxDQUFDO1FBRzVDLFVBQUssR0FBRyxDQUFDLENBQUM7UUFDVixVQUFLLEdBQUcsQ0FBQyxDQUFDO1FBQ1YsdUJBQWtCLEdBQUcscUJBQXFCLENBQUM7UUFFM0MsZUFBVSxHQUFHLElBQUksT0FBTyxFQUFXLENBQUM7SUFHNUMsQ0FBQzs7OztJQUVELG1EQUFROzs7SUFBUjtRQUNFLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQzNCLENBQUM7Ozs7SUFFRCwwREFBZTs7O0lBQWY7UUFBQSxpQkFVQztRQVRDLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLElBQUksQ0FDOUIsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FDM0IsQ0FBQyxTQUFTOzs7O1FBQUMsVUFBQyxNQUFNO1lBQ2pCLElBQUksTUFBTSxFQUFFO2dCQUNWLEtBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDO2dCQUNoRCxLQUFJLENBQUMsa0JBQWtCLEdBQUcsS0FBSSxDQUFDLHFCQUFxQixFQUFFLENBQUM7Z0JBQ3ZELEtBQUksQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO2FBQy9CO1FBQ0gsQ0FBQyxFQUFDLENBQUM7SUFDTCxDQUFDOzs7O0lBRUQsc0RBQVc7OztJQUFYO1FBQ0UsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDM0IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUM3QixDQUFDOzs7O0lBRUQsNERBQWlCOzs7SUFBakI7UUFDRSxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFO1lBQ3hDLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO1lBQ2YsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUM7U0FFakQ7YUFBTTtZQUNMLElBQUksQ0FBQyxLQUFLLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUN4QyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztTQUNoQjtJQUNILENBQUM7Ozs7SUFFRCxpRUFBc0I7OztJQUF0QjtRQUFBLGlCQVFDO1FBUEMsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUNsQyxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUMxQixZQUFZLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUMvQixHQUFHOzs7O1FBQUMsVUFBQyxLQUFLO1lBQ1IsS0FBSSxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2hDLENBQUMsRUFBQyxDQUNILENBQUMsU0FBUyxFQUFFLENBQUM7SUFDaEIsQ0FBQzs7Ozs7SUFFRCw0REFBaUI7Ozs7SUFBakIsVUFBa0IsS0FBSztRQUF2QixpQkFlQztRQWRDLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCOzs7UUFBQztZQUM1QixJQUFJLEtBQUksQ0FBQyxRQUFRLEVBQUU7Z0JBQ2pCLE9BQU87YUFDUjs7Z0JBQ0ssc0JBQXNCLEdBQUcsS0FBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsTUFBTTs7Z0JBQ3RELHNCQUFzQixHQUFHLEtBQUksQ0FBQyxrQkFBa0IsR0FBRyxzQkFBc0I7O2dCQUN6RSxTQUFTLEdBQUcsS0FBSSxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsc0JBQXNCLEdBQUcsS0FBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFJLENBQUMsS0FBSzs7Z0JBRWpGLGdCQUFnQixHQUFHLEtBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsU0FBUztZQUV6RSxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsU0FBUyxDQUFDLElBQUksc0JBQXNCLEVBQUU7Z0JBQzVELEtBQUksQ0FBQyxNQUFNLENBQUMsR0FBRzs7O2dCQUFDLGNBQU0sT0FBQSxLQUFJLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxFQUExQixDQUEwQixFQUFDLENBQUM7YUFDbkQ7UUFDSCxDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUM7Ozs7SUFFRCxnRUFBcUI7OztJQUFyQjtRQUNFLE9BQU8sVUFBVSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxxQkFBcUIsQ0FBQztJQUNuRixDQUFDOztnQkFqRkYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxvQkFBb0I7aUJBQy9COzs7O2dCQU5PLFNBQVM7Z0JBRHNDLE1BQU07Ozs0QkFVMUQsS0FBSzsrQkFDTCxLQUFLOzJCQUNMLEtBQUs7aUNBQ0wsTUFBTTs7SUEyRVQsdUNBQUM7Q0FBQSxBQW5GRCxJQW1GQztTQWhGWSxnQ0FBZ0M7OztJQUUzQyxxREFBMkI7O0lBQzNCLHdEQUE0Qjs7SUFDNUIsb0RBQTJCOztJQUMzQiwwREFBb0Q7Ozs7O0lBRXBELGlEQUF1Qjs7Ozs7SUFDdkIsaURBQWtCOzs7OztJQUNsQixpREFBa0I7Ozs7O0lBQ2xCLDhEQUFtRDs7Ozs7SUFFbkQsc0RBQTRDOzs7OztJQUVoQyxxREFBNEI7Ozs7O0lBQUUsa0RBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtBZnRlclZpZXdJbml0LCBEaXJlY3RpdmUsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE5nWm9uZSwgT25EZXN0cm95LCBPbkluaXQsIE91dHB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge01hdFNlbGVjdCwgU0VMRUNUX0lURU1fSEVJR0hUX0VNfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbC9zZWxlY3QnO1xuaW1wb3J0IHtkZWJvdW5jZVRpbWUsIHRha2VVbnRpbCwgdGFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge2Zyb21FdmVudCwgU3ViamVjdH0gZnJvbSAncnhqcyc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1ttc0luZmluaXRlU2Nyb2xsXSdcbn0pXG5leHBvcnQgY2xhc3MgTWF0U2VsZWN0SW5maW5pdGVTY3JvbGxEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSwgQWZ0ZXJWaWV3SW5pdCB7XG5cbiAgQElucHV0KCkgdGhyZXNob2xkID0gJzE1JSc7XG4gIEBJbnB1dCgpIGRlYm91bmNlVGltZSA9IDE1MDtcbiAgQElucHV0KCkgY29tcGxldGU6IGJvb2xlYW47XG4gIEBPdXRwdXQoKSBpbmZpbml0ZVNjcm9sbCA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcblxuICBwcml2YXRlIHBhbmVsOiBFbGVtZW50O1xuICBwcml2YXRlIHRoclB4ID0gMDtcbiAgcHJpdmF0ZSB0aHJQYyA9IDA7XG4gIHByaXZhdGUgc2luZ2xlT3B0aW9uSGVpZ2h0ID0gU0VMRUNUX0lURU1fSEVJR0hUX0VNO1xuXG4gIHByaXZhdGUgZGVzdHJveWVkJCA9IG5ldyBTdWJqZWN0PGJvb2xlYW4+KCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBtYXRTZWxlY3Q6IE1hdFNlbGVjdCwgcHJpdmF0ZSBuZ1pvbmU6IE5nWm9uZSkge1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5ldmFsdWF0ZVRocmVzaG9sZCgpO1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRoaXMubWF0U2VsZWN0Lm9wZW5lZENoYW5nZS5waXBlKFxuICAgICAgdGFrZVVudGlsKHRoaXMuZGVzdHJveWVkJClcbiAgICApLnN1YnNjcmliZSgob3BlbmVkKSA9PiB7XG4gICAgICBpZiAob3BlbmVkKSB7XG4gICAgICAgIHRoaXMucGFuZWwgPSB0aGlzLm1hdFNlbGVjdC5wYW5lbC5uYXRpdmVFbGVtZW50O1xuICAgICAgICB0aGlzLnNpbmdsZU9wdGlvbkhlaWdodCA9IHRoaXMuZ2V0U2VsZWN0SXRlbUhlaWdodFB4KCk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJTY3JvbGxMaXN0ZW5lcigpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5kZXN0cm95ZWQkLm5leHQodHJ1ZSk7XG4gICAgdGhpcy5kZXN0cm95ZWQkLmNvbXBsZXRlKCk7XG4gIH1cblxuICBldmFsdWF0ZVRocmVzaG9sZCgpIHtcbiAgICBpZiAodGhpcy50aHJlc2hvbGQubGFzdEluZGV4T2YoJyUnKSA+IC0xKSB7XG4gICAgICB0aGlzLnRoclB4ID0gMDtcbiAgICAgIHRoaXMudGhyUGMgPSAocGFyc2VGbG9hdCh0aGlzLnRocmVzaG9sZCkgLyAxMDApO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudGhyUHggPSBwYXJzZUZsb2F0KHRoaXMudGhyZXNob2xkKTtcbiAgICAgIHRoaXMudGhyUGMgPSAwO1xuICAgIH1cbiAgfVxuXG4gIHJlZ2lzdGVyU2Nyb2xsTGlzdGVuZXIoKSB7XG4gICAgZnJvbUV2ZW50KHRoaXMucGFuZWwsICdzY3JvbGwnKS5waXBlKFxuICAgICAgdGFrZVVudGlsKHRoaXMuZGVzdHJveWVkJCksXG4gICAgICBkZWJvdW5jZVRpbWUodGhpcy5kZWJvdW5jZVRpbWUpLFxuICAgICAgdGFwKChldmVudCkgPT4ge1xuICAgICAgICB0aGlzLmhhbmRsZVNjcm9sbEV2ZW50KGV2ZW50KTtcbiAgICAgIH0pXG4gICAgKS5zdWJzY3JpYmUoKTtcbiAgfVxuXG4gIGhhbmRsZVNjcm9sbEV2ZW50KGV2ZW50KSB7XG4gICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgaWYgKHRoaXMuY29tcGxldGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgY291bnRPZlJlbmRlcmVkT3B0aW9ucyA9IHRoaXMubWF0U2VsZWN0Lm9wdGlvbnMubGVuZ3RoO1xuICAgICAgY29uc3QgaW5maW5pdGVTY3JvbGxEaXN0YW5jZSA9IHRoaXMuc2luZ2xlT3B0aW9uSGVpZ2h0ICogY291bnRPZlJlbmRlcmVkT3B0aW9ucztcbiAgICAgIGNvbnN0IHRocmVzaG9sZCA9IHRoaXMudGhyUGMgIT09IDAgPyAoaW5maW5pdGVTY3JvbGxEaXN0YW5jZSAqIHRoaXMudGhyUGMpIDogdGhpcy50aHJQeDtcblxuICAgICAgY29uc3Qgc2Nyb2xsZWREaXN0YW5jZSA9IHRoaXMucGFuZWwuY2xpZW50SGVpZ2h0ICsgZXZlbnQudGFyZ2V0LnNjcm9sbFRvcDtcblxuICAgICAgaWYgKChzY3JvbGxlZERpc3RhbmNlICsgdGhyZXNob2xkKSA+PSBpbmZpbml0ZVNjcm9sbERpc3RhbmNlKSB7XG4gICAgICAgIHRoaXMubmdab25lLnJ1bigoKSA9PiB0aGlzLmluZmluaXRlU2Nyb2xsLmVtaXQoKSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBnZXRTZWxlY3RJdGVtSGVpZ2h0UHgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gcGFyc2VGbG9hdChnZXRDb21wdXRlZFN0eWxlKHRoaXMucGFuZWwpLmZvbnRTaXplKSAqIFNFTEVDVF9JVEVNX0hFSUdIVF9FTTtcbiAgfVxuXG59XG4iXX0=